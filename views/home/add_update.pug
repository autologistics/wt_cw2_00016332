include ../head.pug
body
  .container.mt-5
    h1 #{mode}
    .mb-3
      label(for="eventName" class="form-label") Event Name
      input(type="text" class="form-control" id="eventName" name="eventName" required)
    .mb-3
      label(for="eventDescription" class="form-label") Event Description
      textarea(class="form-control" id="eventDescription" name="eventDescription" rows="3" required)
    .mb-3
      label(for="eventDateTime" class="form-label") Event Date/Time
      .input-group.date(id="datetimepicker1" data-target-input="nearest")
        input(type="text" class="form-control datetimepicker-input" data-target="#datetimepicker1" id="eventDateTime" name="eventDateTime" required)
        .input-group-append(data-target="#datetimepicker1" data-toggle="datetimepicker")
          .input-group-text
            i.fas.fa-calendar-alt
    .mb-3
      label(for="eventVenue" class="form-label") eventVenue
      input(type="text" class="form-control" id="eventVenue" name="eventVenue" required)
    .mb-3
      label(for="eventOrganizer" class="form-label") Organizer
      input(type="text" class="form-control" id="eventOrganizer" name="eventOrganizer" required)
    button(type="submit" class="btn btn-success" onclick="submitForm()") #{mode === 'Update' ? 'Update' : 'Add'}
    span &nbsp;
    button(type="submit" class="btn btn-primary" onclick="window.location.href='/'") Back to list

  script.
    const format = 'DD/MM/YYYY HH:mm'
    const picker = new tempusDominus.TempusDominus(document.getElementById('datetimepicker1'),{
        localization: {
            'locale': 'fr'
        }
    })
    picker.dates.formatInput = function(date) {
        return moment(date).format(format)
    }

    if ("#{mode}" === "Update") {
      const eventData = !{JSON.stringify(eventData || {})}.event;
      document.getElementById('eventName').value = eventData.eventName || '';
      document.getElementById('eventDescription').value = eventData.eventDescription || '';

      picker.dates.setValue(
        new tempusDominus.DateTime(moment(eventData.eventDateTime, format))
      );

      document.getElementById('eventVenue').value = eventData.eventVenue || '';
      document.getElementById('eventOrganizer').value = eventData.eventOrganizer || '';
    }

    function submitForm() {
      const eventData = {
        eventName: document.getElementById('eventName').value,
        eventDescription: document.getElementById('eventDescription').value,
        eventDateTime: document.getElementById('eventDateTime').value,
        eventVenue: document.getElementById('eventVenue').value,
        eventOrganizer: document.getElementById('eventOrganizer').value,
      };

      const url = "#{mode}" === "Update" ? `/api/event/${!{JSON.stringify(eventData || {})}.id}` : '/api/event';
      const method = "#{mode}" === "Update" ? 'put' : 'post';

      axios[method](url, eventData).then(response => {
        alert('Success!');
        location.href = '/'
      })
      .catch(error => {
        if(error.response)
          alert(JSON.stringify(error.response.data.errors))
        else
          alert(error)
      });
    }
